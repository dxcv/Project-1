# -*- coding: utf-8 -*-
"""
@author 陈祥明

依照portfolio、账户、板块获取持仓
"""
import pandas as pd
import numpy as np
from functools import reduce
import sys
sys.path.append(r'D:\CXM\Project_New\SQLLINK')
sys.path.append(r'D:\CXM\Project_New\ScenarioAnalysis')
import MSSQL
import Constant
import DataClean



# Dataframe查询ParentID下的子portfolioID
def getportfolioIDbyparentID(df, ID):
    df0 = df[df['parentID'] == ID]
    name_li0 = np.array(df0[['portfolioID']].drop_duplicates()).tolist()
    nameli = [x[0] for x in name_li0]
    return nameli

def getallpositionID(df, portli):
    for i in portli:
        name_li =





# ###########################################获取当日部门仓位情况######################################
# 数据来源为VaR数据库
# 获取全部门仓位情况
date = '20180716'
dbvar = MSSQL.DB_ScenarioAnalysis() #VaR实例

query = 'select * from positionEod where Date=\'{}\' and portfolioID<>\'otc\''.format(date)
Source = dbvar.ExecQuery(query)

positions = {}
if Source == []:
   print('今日仓位数据尚未更新')
else:
   Dataset = []
   for i in range(0, len(Source)):
       a = (Source[i][2], Source[i][3], Source[i][5].encode('latin1').decode('gbk'), Source[i][6], Source[i][7])
       Dataset.append(a)
# print Dataset
# 获取整个仓位情况，生成Dataframe，生成新列position，便于计算敞口
   df = pd.DataFrame(Dataset, columns=['InstrumentID', 'Totalposition', 'direction', 'portfolioID', 'parentID'])
   df['position'] = df['Totalposition']
   df.loc[df['direction'] == '空', 'position'] = -df.loc[df['direction'] == '空', 'Totalposition']
   li = Constant.portfolioID_list  # portfolio的ID
   for i in li:
       if i == 'ALL':
           positions['ALL'] = df
       else:
           df0 = df[df['portfolioID'] == i]
           portID = getportfolioIDbyparentID(df, i)
           if portID is None:
               positions[i] = df0
           else:
               df1 = [df[df['portfolioID'] == x] for x in portID]
               df2 = df0.append(df1)
               positions[i] = df2
   positions["indexarb+indexarb2"] = positions['indexarb'].append(positions['indexarb2'])

# 输出至Excel
#
# 生成目标组合仓位情况
target_list = Constant.targetID_list  # 目标组合
results = {}
for x in range(0, len(target_list)):
    results[target_list[x]] = positions[target_list[x]].groupby('InstrumentID').sum()

# print(positions['ALL'])
